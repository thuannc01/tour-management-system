openapi: 3.0.0
info:
  title: 'API Documentation - ThuanNC'
  description: 'L5 Swagger OpenApi description'
  contact:
    email: congthuan701@gmail.com
  version: v1.0
servers:
  -
    url: 'http://thuan-be:2001/api'
    description: 'Laravel & PostgreSQL'
paths:
  /additional-service:
    get:
      tags:
        - 'Additional Service'
      summary: 'Get all additional service'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: d1d8990b88865266fc1e709e27d97bf4
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /login:
    post:
      tags:
        - Authentication
      summary: "Login to get token.\nCreated: 2023/08/13"
      description: "\r\n     *      Code\r\n     *          200 - Success\r\n     *          400 - Bad request\r\n     *          401 - Not authentication\r\n     *          403 - Not access\r\n     *          422 - Input invalidate\r\n     *          423 - Have other error\r\n     *          500 - Server error\r\n     *      "
      operationId: 67d6d0fdd54fba132e1b6f55ca254183
      requestBody:
        description: 'Data login'
        content:
          application/json:
            schema:
              required:
                - loginid
                - password
              properties:
                email:
                  type: string
                  example: thuan@gmail.com
                password:
                  type: string
                  format: password
                  example: '123123'
              type: object
      responses:
        200:
          description: 'Result after check account'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
  /register:
    post:
      tags:
        - Authentication
      summary: "Register for a user account\nCreated: 2023/08/13"
      description: "\r\n     *      Code\r\n     *          200 - Success\r\n     *          400 - Bad request\r\n     *          401 - Not authentication\r\n     *          403 - Not access\r\n     *          422 - Input invalidate\r\n     *          423 - Have other error\r\n     *          500 - Server error\r\n     *      "
      operationId: 5d4fa5d5607ed675ba93907e1fc94534
      requestBody:
        description: 'Data login'
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
                - phone_number
                - password_confirms
              properties:
                name:
                  type: string
                  example: 'Thuan Nguyen Cong'
                email:
                  type: string
                  example: thuannc@gmail.com
                phone_number:
                  type: string
                  example: '0909090932'
                password:
                  type: string
                  format: password
                  example: '123123'
                password_confirmation:
                  type: string
                  format: password
                  example: '123123'
              type: object
      responses:
        200:
          description: 'Result after register account success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
  /logout:
    post:
      tags:
        - Authentication
      summary: "Logout\nCreated: 2023/08/13"
      description: "\r\n     *      Code\r\n     *          200 - Success\r\n     *          400 - Bad request\r\n     *          401 - Not authentication\r\n     *          403 - Not access\r\n     *          422 - Input invalidate\r\n     *          423 - Have other error\r\n     *          500 - Server error\r\n     *      "
      operationId: 28d48c13fca984400ac8de99f54ee13a
      responses:
        200:
          description: 'Result after success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /refresh:
    post:
      tags:
        - Authentication
      summary: "Refresh a token\nCreated: 2023/08/13"
      description: "\r\n     *      Code\r\n     *          200 - Success\r\n     *          400 - Bad request\r\n     *          401 - Not authentication\r\n     *          403 - Not access\r\n     *          422 - Input invalidate\r\n     *          423 - Have other error\r\n     *          500 - Server error\r\n     *      "
      operationId: 43a6bea9efa4b685457298ce9505de70
      responses:
        200:
          description: 'Result after success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /category:
    get:
      tags:
        - Category
      summary: 'Get all category'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: 91fc23f78e8b18b8cd5d4650eddea6ae
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /food-spot:
    get:
      tags:
        - 'Food spot'
      summary: 'Get all food spots'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: eaf81ffcf837a8d0aaef36f1fbd57bb4
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /hotel-spot:
    get:
      tags:
        - 'Hotel spots'
      summary: 'Get all hotel spots'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: 0faa4783df8423b21f2f57b090f9bec3
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /location:
    get:
      tags:
        - Location
      summary: 'Get all location'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: b16da93f833d1851f8ea08146d8650df
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /role:
    get:
      tags:
        - Role
      summary: 'Get role name by id'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: d43bbacd0271bcd2ffa5f1f312ea7c46
      parameters:
        -
          name: id
          in: query
          description: 'Get name by id'
          schema:
            type: int
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /segment:
    get:
      tags:
        - Segment
      summary: 'Get all segment tourist'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: b306cf6fd6903597660c7c5a5ac81748
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /statistical:
    get:
      tags:
        - Statistical
      summary: 'init data for statistics by revenue'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: f1f59f9027834afc4c6ae16518d52c72
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /tour:
    get:
      tags:
        - Tour
      summary: 'Search tour'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: 1988c4fdfca71dd358983e7c99415901
      parameters:
        -
          name: title
          in: query
          description: 'Tên tour du lịch'
          schema:
            type: string
        -
          name: departure_time
          in: query
          description: 'Ngày đi'
          schema:
            type: string
        -
          name: arrival_time
          in: query
          description: 'Ngày về'
          schema:
            type: string
        -
          name: adult_ticket_price
          in: query
          description: 'Giá tour'
          schema:
            type: string
        -
          name: page_size
          in: query
          description: 'Số lượng dòng hiển thị trên mỗi trang của kết quả phân trang'
          schema:
            type: int
        -
          name: page_number
          in: query
          description: 'Trang hiện tại muốn lấy dữ liệu'
          schema:
            type: int
        -
          name: mode
          in: query
          description: '0: admin, 1: client'
          schema:
            type: int
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
    post:
      tags:
        - Tour
      summary: 'Save tour'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: 1f313705a40fbbccb5c341539f0dc6ff
      requestBody:
        description: 'Start date'
        content:
          application/json:
            schema:
              properties:
                tourData:
                  type: object
                  example: '{...}'
                tourDateData:
                  type: arr
                  example: '[...]'
              type: object
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
    delete:
      tags:
        - Tour
      summary: 'Delete tour'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: 9231c54e54b7d4436d9c909d1a2b200b
      parameters:
        -
          name: 'Id tour to delete'
          in: query
          description: 'Id tour du lịch'
          schema:
            type: int
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /type-transportation:
    get:
      tags:
        - 'Type transportation'
      summary: 'Get all type transportation'
      description: "\n     *      Code\n     *          200 - Success\n     *          400 - Bad request\n     *          401 - Not authentication\n     *          403 - Not access\n     *          422 - Input invalidate\n     *          423 - Have other error\n     *          500 - Server error\n     *      "
      operationId: 3ab835a69991f65f6c56ed7bf53c641e
      responses:
        200:
          description: 'Result of success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
  /user-profile:
    get:
      tags:
        - User
      summary: "Get the authenticated User (user-profile)\nCreated: 2023/08/13"
      description: "\r\n     *      Code\r\n     *          200 - Success\r\n     *          400 - Bad request\r\n     *          401 - Not authentication\r\n     *          403 - Not access\r\n     *          422 - Input invalidate\r\n     *          423 - Have other error\r\n     *          500 - Server error\r\n     *      "
      operationId: 89596c0f7bec9b13e6cfae792269be07
      responses:
        200:
          description: 'Result after success'
          content:
            application/json:
              schema:
                properties:
                  Code:
                    type: integer
                    example: '200'
                  Data:
                    description: 'Result of success'
                type: object
      security:
        -
          apiAuth: []
components:
  securitySchemes:
    apiAuth:
      type: http
      description: 'Login with email and password to get the authentication token'
      name: 'Token based Based'
      in: header
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: 'ThuanTourist Project'
    description: 'API Endpoints of Projects'
